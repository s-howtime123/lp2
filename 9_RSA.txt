from cryptography.hazmat.primitives.asymmetric import rsa, padding
from cryptography.hazmat.primitives import serialization, hashes

# Function to generate RSA keys (private and public)
def generate_keys():
    private_key = rsa.generate_private_key(
        public_exponent=65537,
        key_size=2048
    )
    public_key = private_key.public_key()
    return private_key, public_key

# Function to encrypt a message using the public key
def encrypt_message(message, public_key):
    encrypted = public_key.encrypt(
        message.encode('utf-8'),
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return encrypted

# Function to decrypt a message using the private key
def decrypt_message(encrypted_message, private_key):
    decrypted = private_key.decrypt(
        encrypted_message,
        padding.OAEP(
            mgf=padding.MGF1(algorithm=hashes.SHA256()),
            algorithm=hashes.SHA256(),
            label=None
        )
    )
    return decrypted.decode('utf-8')

# Main function to execute the program
def main():
    # Taking user input for the message
    message = input("Enter the message to encrypt: ")
    
    # Generating RSA keys
    private_key, public_key = generate_keys()

    # Encrypt the message
    encrypted_msg = encrypt_message(message, public_key)
    print(f"Encrypted (bytes): {encrypted_msg}")
    print(f"Encrypted (hex): {encrypted_msg.hex()}")

    # Decrypt the message
    decrypted_msg = decrypt_message(encrypted_msg, private_key)
    print(f"Decrypted Message: {decrypted_msg}")

# Run the program
if __name__ == "__main__":
    main()
